name: Pull Request Test Java API Server Build on Debian

on:
  pull_request:
    branches:
      - master

jobs:
  prBuildSenzingJavaApiServer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Capture environment variables
        run: printenv
      - name: Check if there are conflicts when local merging master
        id: local_merge_master
        run: git merge origin/master
      - name: Download Senzing Deb Package Onto Runner
        id: download_senzing_deb
        env:
          SENZING_REPO_URL: https://senzing-production-apt.s3.amazonaws.com/senzingrepo_1.0.0-1_amd64.deb
        run: |
          wget ${SENZING_REPO_URL}
          sudo apt-get -y install ./${SENZING_REPO_URL##*/}
          rm -rf senzingrepo_1.0.0-1_amd64.deb
          sudo apt-get update -y
          sudo chown _apt /home/runner/work/senzing-api-server/senzing-api-server/
          sudo apt-get download -o=dir::cache=${HOME} senzingapi senzingdata-v1
          sudo chown runner /home/runner/work/senzing-api-server/senzing-api-server/
      - name: Install Senzing Data Without Sqlite Dependency
        id: install_senzing_data
        run: sudo SENZING_ACCEPT_EULA=${{ secrets.SENZING_ACCEPT_EULA }} dpkg -i --ignore-depends=sqlite3,sqlite *senzingdata*deb
      - name: Install Senzing Api Without Sqlite Dependency
        id: install_senzing_api
        run: sudo SENZING_ACCEPT_EULA=${{ secrets.SENZING_ACCEPT_EULA }} dpkg -i --ignore-depends=sqlite3,sqlite *senzingapi*deb
      - name: Get Build Informaiton
        if: always()
        id: build_info
        run: |
          g2_verion=$(apt list senzingapi | grep installed | grep -Po "\d{1,}\.\d{1,}\.\d{1,}-\d{1,}")
          branch_name=${GITHUB_REF##*/}
          echo '{"g2_version":"'${g2_version}'","branch_name":"'${branch_name}'"}' >> build_info.json 2>&1
      - name: Copy /opt/senzing to Runner working directory
        id: copy_senzing_wrk_dir
        run: |
          sudo mkdir -p ${HOME}/work/senzing-api-server/senzing-api-server/g2/lib
          sudo mv /opt/senzing/g2/lib/g2.jar ${HOME}/work/senzing-api-server/senzing-api-server/g2/lib/g2.jar
      - name: Build Java API Server
        id: build_java_api_server
        run: |
          make \
            BASE_BUILDER_IMAGE="senzing/base-image-debian:1.0.3" \
            BASE_IMAGE="senzing/senzing-base:1.4.0" \
            SENZING_G2_JAR_PATHNAME=${HOME}/work/senzing-api-server/senzing-api-server/g2/lib/g2.jar \
            SENZING_G2_JAR_VERSION=$(cat /opt/senzing/g2/g2BuildVersion.json | jq --raw-output '.VERSION') \
            docker-build
      - name: Persisting Variables
        id: persisting_log
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: build_info
          path: build_info.json
  logPrBuildSenzingJavaApiServer:
    needs: prBuildSenzingJavaApiServer
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Get Build Job Info From FIle
        uses: actions/download-artifact@v1
        with:
          name: build_info
      - name: Set Variables With Build Info
        id: job_info
        run: |
          curl -v -L -u runner:${{ secrets.GITHUB_TOKEN }} -o job_info.json https://api.github.com/repos/Senzing/senzing-api-server/actions/runs/${{ github.run_id }}/jobs
          echo ::set-output name=log_url::$(cat job_info.json | jq --raw-output '.jobs | .[0] | .html_url')
          echo ::set-output name=status::$(cat job_info.json | jq --raw-output '.jobs | .[0] | .conclusion')
          echo ::set-output name=g2_version::$(cat build_info/build_info.json | jq --raw-output '.g2_version')
          echo ::set-output name=branch_name::$(cat build_info/build_info.json | jq --raw-output '.branch_name')
      - name: Generate log file
        run: |
          curl -v -L -u runner:${{ secrets.GITHUB_TOKEN }} -o build_logs.txt ${{ steps.job_info.outputs.log_url }}/logs
      - name: Slack Notification
        id: slack_notification
        uses: Senzing/git-action-slack-notification@1.0.0
        if: contains(steps.job_info.outputs.status, 'failure')
        env:
          SLACK_CHANNEL: ci-cd-dev
          SLACK_COLOR: '#3278BD'
          SLACK_TITLE: Senzing API server failed to build on commit sha ${{ github.sha }} using G2 Version ${{ steps.job_info.outputs.g2_version }}
          SLACK_MESSAGE: |
            OS: senzing/base-image-debian:1.0.1
            Senzing RPM version: ${{ steps.job_info.outputs.g2_version }}
            DEB URL: https://senzing-staging-apt.s3.amazonaws.com/senzingstagingrepo_1.0.0-1_amd64.deb
            Branch Name: ${{ steps.job_info.outputs.branch_name }}
            The commit SHA is: ${{ github.sha }}
            Git Actions Log URL: ${{ steps.job_info.outputs.log_url }}
          SLACK_USERNAME: senzing-api-server
          SLACK_WEBHOOK: ${{ secrets.SLACK_NOTIFICATION }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_ACTION: ${{ github.action }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_WORKFLOW: ${{ github.workflow }}
      - name: Persisting log
        id: persisting_log
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: workflow_log
          path: job_info.json